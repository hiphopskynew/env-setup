#!/bin/bash

prerequisite() {
	echo '
  ## Pre-Requisite ##

  1). Go to "https://mega.nz/folder/Yuhh2Qib#LFj8-oEhblppEuRns5Wwbw"
  2). Click "Download as ZIP"
  3). Move file "env-setup.zip" to "'$(pwd)'" directory
'
	read -p "Did you do Prerequisite step done? [Y/n] " pr
	if [ "$pr" == "Y" ] || [ "$pr" == "y" ]; then
		if [ ! -f "env-setup.zip" ]; then
			echo '[error] Missing file "env-setup.zip", Please do Pre-Requisite step.'
			prerequisite
		fi
	else
		prerequisite
	fi
}
prerequisite

flag_y=""
pkg_dir="pkg"
support_os_versions=()
pkg_excluded=('fonts-powerline')
os_version=$(cat /etc/os-release | grep -e "VERSION_ID" | cut -d\" -f2)
pkg_availables=($(ls ${pkg_dir}/${os_version}) $(ls ${pkg_dir}/universal))
assets="/tmp/env-setup"
unzip env-setup.zip -d /tmp

for d in ${pkg_dir}/*/; do
	support_os_versions+=($(echo $d | cut -d/ -f2))
done

for target in "${pkg_excluded[@]}"; do
	for i in "${!pkg_availables[@]}"; do
		if [[ ${pkg_availables[i]} = $target ]]; then
			unset 'pkg_availables[i]'
		fi
	done
done

while getopts ":" opt; do
	if [ "$OPTARG" == "y" ]; then
		flag_y="$OPTARG"
	fi
done

# Check operation system
check_os_version() {
	for version in "${support_os_versions[@]}"; do
		if [ "$version" == "$os_version" ]; then
			echo "OK"
			return
		fi
	done
}

# Check package installed on the environment
IFS=':' read -r -a paths <<<"$PATH"
is_installed() {
	app=$1
	for path in "${paths[@]}"; do
		if [ -f "$path/$app" ]; then
			echo "exist"
			return
		fi
	done
}

# Check package file
has_package() {
	app=$1
	for pkg in "${pkg_availables[@]}"; do
		if [ "$pkg" == "$app" ]; then
			echo "exist"
			return
		fi
	done
}

# ensure to install packages
ensure_install_apps() {
	IFS=' ' read -r -a apps <<<"$1"
	for app in "${apps[@]}"; do

		# The install package file not found
		if [ -z "$(has_package ${app})" ]; then
			# force yes flag
			if [ "$flag_y" == "y" ]; then
				skipvar="y"
			else
				read -p "[warn] Package $app does not support. Do you want to continue? [Y/n] " skipvar
			fi

			# skip or end installation
			if [ "$skipvar" == "Y" ] || [ "$skipvar" == "y" ]; then
				continue
			else
				echo "[info] The installation is done."
				exit 1
			fi
		fi

		# Install package if the package installation not yet
		if [ -z "$(is_installed ${app})" ]; then
			echo "[info] ${app} installing..."
			install $app
		fi
	done
	echo "[info] The installation is done."
}

# Install package
install() {
	app=$1
	if [ -f "${pkg_dir}/${os_version}/${app}" ]; then
		/bin/bash "${pkg_dir}/${os_version}/${app}" "${pkg_dir}/${os_version}"
	else
		/bin/bash "${pkg_dir}/universal/${app}" "${pkg_dir}/universal" "${assets}"
	fi
}

if [ -z "$(check_os_version)" ]; then
	echo "The operation system is not supported."
	exit 1
fi

info() {
	echo '
###########################################################
# All packages are supported, see below

' ["${pkg_availables[*]}"]'

# Please enter packages that you want to install separate each package by space such as 
 :: curl git vim zsh docker postman 
###########################################################
'
}

user_choosing_packages_to_install() {
	info

	read -p "Do you want to install all packages? [Y/n]" confirm
	if [ "$confirm" == "Y" ] || [ "$confirm" == "y" ]; then
		ensure_install_apps "${pkg_availables[*]}"
		exit 0
	fi
	if [ "$confirm" == "N" ] || [ "$confirm" == "n" ]; then
		read -p "Enter packages :: " pkg_input
		if [ -z "$pkg_input" ]; then
			user_choosing_packages_to_install
		fi
		ensure_install_apps "${pkg_input[*]}"
		exit 0
	fi

	user_choosing_packages_to_install
}

user_choosing_packages_to_install
